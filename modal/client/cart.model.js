const db = require('../../config/database');

// üì¶ L·∫•y gi·ªè h√†ng c·ªßa user
const getCartUserID = async (userId) => {
  const [result] = await db.query(
    'SELECT * FROM gio_hang WHERE id_nguoi_dung = ? LIMIT 1',
    [userId]
  );
  return result.length > 0 ? result[0] : null;
};

// üì• L·∫•y danh s√°ch s·∫£n ph·∫©m trong gi·ªè
const getCartItem = async (userId) => {
  const sql = `
    SELECT 
      gio_hang.id_san_pham, 
      gio_hang.so_luong, 
      san_pham.ten, 
      san_pham.gia, 
      san_pham.hinh_anh
     
    FROM gio_hang
    JOIN san_pham ON gio_hang.id_san_pham = san_pham.id_san_pham
    WHERE gio_hang.id_nguoi_dung = ?`;
  const [result] = await db.query(sql, [userId]);
  return result;
};

// ‚ûï Th√™m s·∫£n ph·∫©m v√†o gi·ªè
const addItemToCart = async (userId, productId, quantity) => {
  // Ki·ªÉm tra n·∫øu s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i trong gi·ªè
  const [existing] = await db.query(
    'SELECT * FROM gio_hang WHERE id_nguoi_dung = ? AND id_san_pham = ?',
    [userId, productId]
  );

  if (existing.length > 0) {
    // C·ªông d·ªìn s·ªë l∆∞·ª£ng n·∫øu s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè
    const newQuantity = existing[0].so_luong + quantity;
    const [updateResult] = await db.query(
      'UPDATE gio_hang SET so_luong = ? WHERE id_nguoi_dung = ? AND id_san_pham = ?',
      [newQuantity, userId, productId]
    );
    return { type: 'update', result: updateResult, quantity: newQuantity };
  } else {
    // Th√™m s·∫£n ph·∫©m m·ªõi v√†o gi·ªè
    const [insertResult] = await db.query(
      'INSERT INTO gio_hang (id_nguoi_dung, id_san_pham, so_luong) VALUES (?, ?, ?)',
      [userId, productId, quantity]
    );
    return { type: 'insert', result: insertResult, quantity };
  }
};

// üîÑ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
const updateCartItemQuantity = async (userId, productId, quantity) => {
  const sql = `
    UPDATE gio_hang 
    SET so_luong = ? 
    WHERE id_nguoi_dung = ? AND id_san_pham = ?`;
  const [result] = await db.query(sql, [quantity, userId, productId]);

  if (result.affectedRows === 0) {
    // N·∫øu s·∫£n ph·∫©m ch∆∞a t·ªìn t·∫°i => Th√™m m·ªõi
    return await addItemToCart(userId, productId, quantity);
  }
  return result;
};

// ‚ùå Xo√° 1 s·∫£n ph·∫©m kh·ªèi gi·ªè
const deleteItem = async (userId, productId) => {
  const sql = `
    DELETE FROM gio_hang
    WHERE id_nguoi_dung = ? AND id_san_pham = ?`;
  const [result] = await db.query(sql, [userId, productId]);
  return result;
};

// üßπ Xo√° to√†n b·ªô gi·ªè h√†ng
const clearCart = async (userId) => {
  const sql = `
    DELETE FROM gio_hang
    WHERE id_nguoi_dung = ?`;
  const [result] = await db.query(sql, [userId]);
  return result;
};


// const addItemToCart = async (userId, productId, quantity) => {
//   // Ki·ªÉm tra s·ªë l∆∞·ª£ng s·∫£n ph·∫©m c√≤n trong kho
//   const [product] = await db.query(
//     'SELECT so_luong_kho FROM san_pham WHERE id_san_pham = ?',
//     [productId]
//   );

//   // N·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ho·∫∑c s·ªë l∆∞·ª£ng kho kh√¥ng ƒë·ªß
//   if (!product.length || product[0].so_luong_kho < quantity) {
//     throw new Error('S·ªë l∆∞·ª£ng s·∫£n ph·∫©m kh√¥ng ƒë·ªß trong kho ƒë·ªÉ th√™m v√†o gi·ªè');
//   }

//   // Ki·ªÉm tra n·∫øu s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i trong gi·ªè
//   const [existing] = await db.query(
//     'SELECT * FROM gio_hang WHERE id_nguoi_dung = ? AND id_san_pham = ?',
//     [userId, productId]
//   );

//   if (existing.length > 0) {
//     // C·ªông d·ªìn s·ªë l∆∞·ª£ng n·∫øu s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè
//     const newQuantity = existing[0].so_luong + quantity;
    
//     // Ki·ªÉm tra l·∫°i s·ªë l∆∞·ª£ng trong kho sau khi c·∫≠p nh·∫≠t
//     if (product[0].so_luong_kho < newQuantity) {
//       throw new Error('S·ªë l∆∞·ª£ng s·∫£n ph·∫©m kh√¥ng ƒë·ªß trong kho ƒë·ªÉ c·∫≠p nh·∫≠t');
//     }

//     const [updateResult] = await db.query(
//       'UPDATE gio_hang SET so_luong = ? WHERE id_nguoi_dung = ? AND id_san_pham = ?',
//       [newQuantity, userId, productId]
//     );
//     return { type: 'update', result: updateResult, quantity: newQuantity };
//   } else {
//     // Th√™m s·∫£n ph·∫©m m·ªõi v√†o gi·ªè
//     const [insertResult] = await db.query(
//       'INSERT INTO gio_hang (id_nguoi_dung, id_san_pham, so_luong) VALUES (?, ?, ?)',
//       [userId, productId, quantity]
//     );
//     return { type: 'insert', result: insertResult, quantity };
//   }
// };
// // üîÑ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
// const updateCartItemQuantity = async (userId, productId, quantity) => {
//   // Ki·ªÉm tra s·ªë l∆∞·ª£ng s·∫£n ph·∫©m c√≤n trong kho
//   const [product] = await db.query(
//     'SELECT so_luong_kho FROM san_pham WHERE id_san_pham = ?',
//     [productId]
//   );

//   // N·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ho·∫∑c s·ªë l∆∞·ª£ng kho kh√¥ng ƒë·ªß
//   if (!product.length || product[0].so_luong_kho < quantity) {
//     throw new Error('S·ªë l∆∞·ª£ng s·∫£n ph·∫©m kh√¥ng ƒë·ªß trong kho ƒë·ªÉ c·∫≠p nh·∫≠t');
//   }

//   const sql = `
//     UPDATE gio_hang 
//     SET so_luong = ? 
//     WHERE id_nguoi_dung = ? AND id_san_pham = ?`;
//   const [result] = await db.query(sql, [quantity, userId, productId]);

//   if (result.affectedRows === 0) {
//     // N·∫øu s·∫£n ph·∫©m ch∆∞a t·ªìn t·∫°i => Th√™m m·ªõi
//     return await addItemToCart(userId, productId, quantity);
//   }
//   return result;
// };


module.exports = {
  getCartUserID,
  getCartItem,
  addItemToCart,
  updateCartItemQuantity,
  deleteItem,
  clearCart,
};
