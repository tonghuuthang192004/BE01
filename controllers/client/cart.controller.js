const cartModel = require('../../modal/client/cart.model');
const db=require('../../config/database')
// üì¶ L·∫•y gi·ªè h√†ng c·ªßa user
module.exports.getUserCart = async (req, res) => {
  try {
    const userId = req.user.id;
  
   // console.log(userId)
    const cart = await cartModel.getCartUserID(userId);

    if (!cart) {
      return res.status(200).json({ success: true, data: [], message: "Gi·ªè h√†ng tr·ªëng" });
    }

    const items = await cartModel.getCartItem(userId);
    res.status(200).json({ success: true, data: items });
  } catch (error) {
    console.error('‚ùå [getUserCart] Error:', error.message);
    res.status(500).json({ success: false, message: "L·ªói server khi l·∫•y gi·ªè h√†ng" });
  }
};

// ‚ûï Th√™m s·∫£n ph·∫©m v√†o gi·ªè
module.exports.addItemToCart = async (req, res) => {
  try {
    const userId = req.user.id;  // L·∫•y userId t·ª´ req.user.id (ƒë∆∞·ª£c x√°c th·ª±c trong middleware)
    console.log('User ID:', userId);  // Log userId ƒë·ªÉ debug

    if (!userId) {
      return res.status(401).json({ success: false, message: "User not authenticated" });
    }

    const { id_san_pham, so_luong } = req.body;

    // Ki·ªÉm tra n·∫øu thi·∫øu id_san_pham ho·∫∑c so_luong
    if (!id_san_pham || so_luong === undefined) {
      return res.status(400).json({ success: false, message: "Thi·∫øu id_san_pham ho·∫∑c so_luong" });
    }

    // Ki·ªÉm tra s·ªë l∆∞·ª£ng kho (so_luong_kho) c·ªßa s·∫£n ph·∫©m
    const [stock] = await db.query('SELECT so_luong_kho FROM san_pham WHERE id_san_pham = ?', [id_san_pham]);

    // Ki·ªÉm tra n·∫øu s·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong kho ho·∫∑c s·ªë l∆∞·ª£ng kh√¥ng ƒë·ªß
    if (stock.length === 0) {
      return res.status(404).json({ success: false, message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong kho" });
    }

    if (stock[0].so_luong_kho < so_luong) {
      return res.status(400).json({ success: false, message: "S·∫£n ph·∫©m kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng trong kho" });
    }

    // L·∫•y gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng
    let cart = await cartModel.getCartUserID(userId);
    if (!cart) {
      return res.status(404).json({ success: false, message: "Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i" });
    }

    // Th√™m ho·∫∑c c·∫≠p nh·∫≠t s·∫£n ph·∫©m v√†o gi·ªè h√†ng
    const result = await cartModel.addItemToCart(userId, id_san_pham, so_luong);

    // X·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ
    let message;
    if (result.type === 'insert') {
      message = "ƒê√£ th√™m s·∫£n ph·∫©m v√†o gi·ªè";
    } else if (result.type === 'update') {
      message = "ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m";
    } else if (result.type === 'restore') {
      message = "ƒê√£ kh√¥i ph·ª•c v√† th√™m l·∫°i s·∫£n ph·∫©m v√†o gi·ªè";
    }

    // Tr·∫£ v·ªÅ ph·∫£n h·ªìi cho client
    res.status(result.type === 'insert' ? 201 : 200).json({
      success: true,
      message,
      quantity: result.quantity
    });

  } catch (error) {
    console.error('‚ùå [addItemToCart] Error:', error.message);
  //  res.status(500).json({ success: false, message: "L·ªói server khi th√™m s·∫£n ph·∫©m v√†o gi·ªè" });
  }
};


// üîÑ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
module.exports.updateItemQuantity = async (req, res) => {
  try {
    const userId = req.user.id;
    const id_san_pham = req.params.id_san_pham;
    const so_luong = req.body.so_luong;

    if (!id_san_pham || so_luong === undefined) {
      return res.status(400).json({ success: false, message: "Thi·∫øu id_san_pham ho·∫∑c so_luong" });
    }

    // Ki·ªÉm tra s·ªë l∆∞·ª£ng kho (so_luong_kho)
    const [stock] = await db.query('SELECT so_luong_kho FROM san_pham WHERE id_san_pham = ?', [id_san_pham]);
    if (stock.length === 0 || stock[0].so_luong_kho < so_luong) {
      return res.status(400).json({ success: false, message: "S·∫£n ph·∫©m kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng trong kho" });
    }

    // L·∫•y gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng
    const cart = await cartModel.getCartUserID(userId);
    if (!cart) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng" });
    }

    // C·∫≠p nh·∫≠t s·∫£n ph·∫©m trong gi·ªè
    const result = await cartModel.updateCartItemQuantity(userId, id_san_pham, so_luong);

    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    res.status(200).json({
      success: true,
      message: result.added
        ? "ƒê√£ th√™m m·ªõi s·∫£n ph·∫©m v√†o gi·ªè v√¨ tr∆∞·ªõc ƒë√≥ kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã xo√°"
        : "C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√†nh c√¥ng"
    });
  } catch (error) {
    console.error('‚ùå [updateItemQuantity] Error:', error.message);
    //res.status(500).json({ success: false, message: "L·ªói server khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng" });
  }
};


// ‚ùå Xo√° 1 s·∫£n ph·∫©m kh·ªèi gi·ªè (soft-delete)
module.exports.deleteItem = async (req, res) => {
  try {
    const userId = req.user.id;
    const id_san_pham = req.params.id_san_pham;

    if (!id_san_pham) {
      return res.status(400).json({ success: false, message: "Thi·∫øu id_san_pham" });
    }

    const cart = await cartModel.getCartUserID(userId);
    if (!cart) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng" });
    }

    const result = await cartModel.deleteItem(userId, id_san_pham);

    if (result.affectedRows > 0) {
      res.status(200).json({ success: true, message: "ƒê√£ xo√° s·∫£n ph·∫©m (soft-delete)" });
    } else {
      res.status(404).json({ success: false, message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong gi·ªè" });
    }
  } catch (error) {
    console.error('‚ùå [deleteItem] Error:', error.message);
    res.status(500).json({ success: false, message: "L·ªói server khi xo√° s·∫£n ph·∫©m" });
  }
};

// üßπ Xo√° to√†n b·ªô gi·ªè h√†ng (soft-delete)
module.exports.clearCart = async (req, res) => {
  try {
    const userId = req.user.id;
    const cart = await cartModel.getCartUserID(userId);

    if (!cart) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng" });
    }

    const result = await cartModel.clearCart(userId);

    res.status(200).json({
      success: true,
      message: result.affectedRows > 0
        ? "ƒê√£ xo√° to√†n b·ªô gi·ªè h√†ng (soft-delete)"
        : "Gi·ªè h√†ng ƒë√£ tr·ªëng"
    });
  } catch (error) {
    console.error('‚ùå [clearCart] Error:', error.message);
    res.status(500).json({ success: false, message: "L·ªói server khi xo√° gi·ªè h√†ng" });
  }
};

// ‚ôªÔ∏è Kh√¥i ph·ª•c 1 s·∫£n ph·∫©m ƒë√£ xo√°
module.exports.restoreItem = async (req, res) => {
  try {
    const userId = req.user.id;
    const id_san_pham = req.params.id_san_pham;
    const so_luong = req.body.so_luong || 1; // m·∫∑c ƒë·ªãnh 1 n·∫øu kh√¥ng truy·ªÅn

    if (!id_san_pham) {
      return res.status(400).json({ success: false, message: "Thi·∫øu id_san_pham" });
    }

    const cart = await cartModel.getCartUserID(userId);
    if (!cart) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng" });
    }

    const result = await cartModel.restoreCartItem(cart.id_gio_hang, id_san_pham, so_luong);

    if (result.affectedRows > 0) {
      res.status(200).json({ success: true, message: "ƒê√£ kh√¥i ph·ª•c s·∫£n ph·∫©m v√†o gi·ªè" });
    } else {
      res.status(404).json({ success: false, message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i ƒë·ªÉ kh√¥i ph·ª•c" });
    }
  } catch (error) {
    console.error('‚ùå [restoreItem] Error:', error.message);
    res.status(500).json({ success: false, message: "L·ªói server khi kh√¥i ph·ª•c s·∫£n ph·∫©m" });
  }
};
